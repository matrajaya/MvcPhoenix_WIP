@model MvcPhoenix.Models.BulkContainerViewModel

@{
    // View to hold and post a BulkContainerViewModel
    if (Model.bulkid == -1)
    {
        ViewBag.Title = "Receive Bulk Container";
        ViewBag.BulkNew = "New";
    }
    else
    {
        ViewBag.Title = "Edit Bulk Container";
    }
}

<div class="container-fluid">
    <!-- Page Heading -->
    <div class="row">
        <div class="col-lg-12">
            <img src="~/Content/images/logos/@Model.logofilename" style="width: auto; height: 73px; float: right" alt="@Model.clientname logo">
        </div>
        <div class="col-lg-12">
            <h1 class="page-header">
                @ViewBag.Title <small>@ViewBag.BulkNew</small>
            </h1>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-lg-12 ">
            <i class="fa fa-arrow-circle-left"></i> @Html.ActionLink("Back to Receiving Main", "Index", "Receiving")
            <span class="pull-right label label-info">Bulk Id: @Model.bulkid.ToString()</span>
        </div>
    </div>
    <!-- /.Page Heading -->
    @using (Html.BeginForm("SaveContainer", "Receiving"))
    {
    <!-- do not remove -->
        @Html.HiddenFor(m => m.isknownmaterial)
        @Html.HiddenFor(m => m.bulkid)
        @Html.HiddenFor(m => m.productmasterid)
        @Html.HiddenFor(m => m.bulkstatus)

        <div class="panel panel-primary">
            <div class="panel-body collapse in">
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <tr>
                            <th>Master Code</th>
                            <th>Name</th>
                            <th>Current Weight on Hand</th>
                            <th>Bulk Status</th>
                        </tr>
                        <tr>
                            <td>@Model.MasterCode</td>
                            <td>@Model.MasterName</td>
                            <td>@Model.pm_sumofcurrentweight.ToString()</td>
                            <td>@Html.DisplayFor(m => m.bulkstatus, new { @class = "form-control" })</td>
                        </tr>
                        <tr>
                            <th colspan="4">Master Notes</th>
                        </tr>
                        <tr>
                            <td colspan="4">@Model.pm_MasterNotes &nbsp;</td>
                        </tr>
                        <tr>
                            <th colspan="2">Handling Other</th>
                            <th colspan="2">Other Handling Instructions</th>
                        </tr>
                        <tr>
                            <td colspan="2">@Model.pm_HandlingOther &nbsp;</td>
                            <td colspan="2">@Model.pm_OtherHandlingInstr &nbsp;</td>
                        </tr>
                        <tr>
                            <th>Refrigerate</th>
                            <th>Refrigerator List</th>
                            <th>Flammable Room</th>
                            <th>Freezable List</th>
                        </tr>
                        <tr>
                            <td>@Model.pm_refrigerate</td>
                            <td>@Model.pm_refrigeratedlist</td>
                            <td>@Model.pm_flammablestorageroom</td>
                            <td>@Model.pm_freezablelist</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title" data-toggle="collapse" data-target="#prodinfopan"><i class="fa fa-file-text-o fa-fw"></i> Product Batch / Lot Information</h3>
            </div>
            <div id="prodinfopan" class="panel-body collapse in">
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>Client</label>
                        @Html.TextBoxFor(m => m.clientname, new { @class = "form-control", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.clientname)
                    </div>
                    <div class="form-group col-md-2">
                        <label>Date Received</label>
                        @Html.TextBoxFor(m => m.receivedate, "{0:dd-MMM-yyyy}", new { @class = "date-picker form-control" })
                        @Html.ValidationMessageFor(m => m.receivedate)
                    </div>
                    <div class="form-group col-md-2">
                        <label>Bin</label>
                        @Html.TextBoxFor(m => m.bin, new { @class = "form-control" })
                    </div>
                    <div class="form-group col-md-2">
                        <label>Warehouse</label>
                        @Html.DropDownListFor(m => m.warehouse, Model.ListOfWareHouses, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.warehouse)
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>Lot Number</label>
                        @Html.TextBoxFor(m => m.lotnumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.lotnumber)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Carrier</label>
                        @Html.DropDownListFor(m => m.carrier, Model.ListOfCarriers, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.carrier)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Receive Weight</label>
                        @Html.TextBoxFor(m => m.receiveweight, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.receiveweight)
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-3">
                        <label>Entered By</label>
                        @Html.TextBoxFor(m => m.enteredby, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.enteredby)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Received By</label>
                        @Html.TextBoxFor(m => m.receivedby, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.receivedby)
                    </div>
                    <div class="form-group col-md-3">
                        <label>COA Included?</label>
                        @Html.CheckBox("coaincluded", Model.coaincluded != null && (bool)Model.coaincluded, new { @class = "checkbox" })
                    </div>
                    <div class="form-group col-md-3">
                        <label>MSDS Included?</label>
                        @Html.CheckBox("msdsincluded", Model.msdsincluded != null && (bool)Model.msdsincluded, new { @class = "checkbox" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <label>Date Of Manufacture</label>
                        @Html.TextBoxFor(m => m.mfgdate, "{0:dd-MMM-yyyy}", new { @class = "date-picker form-control" })
                        @Html.ValidationMessageFor(m => m.mfgdate)
                    </div>
                    <div class="col-md-3">
                        <label>Expiration Date</label>
                        @Html.TextBoxFor(m => m.expirationdate, "{0:dd-MMM-yyyy}", new { @class = " date-picker form-control" })
                        @Html.ValidationMessageFor(m => m.expirationdate)
                    </div>
                    <div class="col-md-3">
                        <label>Cease Ship Date</label>
                        @Html.TextBoxFor(m => m.ceaseshipdate, "{0:dd-MMM-yyyy}", new { @class = "date-picker form-control" })
                        @Html.ValidationMessageFor(m => m.ceaseshipdate)
                    </div>
                    <div class="col-md-3">
                        <label>QC Date</label>
                        @Html.TextBoxFor(m => m.qcdate, "{0:dd-MMM-yyyy}", new { @class = "date-picker form-control" })
                        @Html.ValidationMessageFor(m => m.qcdate)
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title" data-toggle="collapse" data-target="#containerinfopan"><i class="fa fa-file-text-o fa-fw"></i> Container Information</h3>
            </div>
            <div id="containerinfopan" class="panel-body collapse in">
                <div class="row">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label>Container Note</label>
                                @Html.TextAreaFor(m => m.containernotes, new { @class = "form-control", @rows = 5 })
                                @Html.ValidationMessageFor(m => m.containernotes)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <label>Bulk Label Note</label>
                                @Html.TextAreaFor(m => m.bulklabelnote, new { @class = "form-control", @rows = 5 })
                                @Html.ValidationMessageFor(m => m.bulklabelnote)
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label>Bin</label>
                        @Html.TextBoxFor(m => m.bin, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.bin)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Container Color</label>
                        @Html.TextBoxFor(m => m.containercolor, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.containercolor)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Return Location</label>
                        @Html.TextBoxFor(m => m.returnlocation, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.returnlocation)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Container Type</label>
                        @Html.DropDownListFor(m => m.containertype, Model.ListOfContainerTypeIDs, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.containertype)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Other Storage</label>
                        @Html.TextBoxFor(m => m.otherstorage, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.otherstorage)
                    </div>
                    <div class="form-group col-md-3">
                        <label>Unit Measure</label>
                        @Html.TextBoxFor(m => m.um, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.um)
                    </div>
                    <div class="col-md-6">
                        <ul class="list-unstyled list-2-col">
                            <li>
                                @Html.CheckBox("flammable", Model.flammable != null && (bool)Model.flammable, new { @class = "checkbox checkbox-inline", disabled = "disabled" })
                                <label class="control-label">Flammable</label>
                            </li>
                            <li>
                                @Html.CheckBox("freezer", Model.freezer != null && (bool)Model.freezer, new { @class = "checkbox checkbox-inline", disabled = "disabled" })
                                <label class="control-label">Freezer</label>
                            </li>
                            <li>
                                @Html.CheckBox("refrigerated", Model.refrigerated != null && (bool)Model.refrigerated, new { @class = "checkbox checkbox-inline", disabled = "disabled" })
                                <label class="control-label">Refrigerate</label>
                            </li>
                            <li>
                                @Html.CheckBox("packout", Model.packout != null && (bool)Model.packout, new { @class = "checkbox checkbox-inline", disabled = "disabled" })
                                <label class="control-label">Packout On Receipt</label>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <input id="btnSave" type="submit" value="Save Changes" class="btn btn-success btn-block" />
            </div>
            <div class="form-group col-md-6">
                <input type="button" class="btn btn-danger btn-block" onclick="location.href = 'javascript:history.back()';" value="Cancel Order" />
                @*@Html.ActionLink("Cancel", "Index", "Receiving", null, new { @class = "btn btn-danger btn-block", onclick = "return confirm('Cancel This Process?')" })*@
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <i class="fa fa-arrow-circle-up"></i> <a href="#top">Back to Top</a>
                <span class="pull-right"><a href="#top">Back to Top</a> <i class="fa fa-arrow-circle-up"></i></span>
            </div>
        </div>
        <div>
            <span id="dvSaveResult"></span>
        </div>
    }
</div>