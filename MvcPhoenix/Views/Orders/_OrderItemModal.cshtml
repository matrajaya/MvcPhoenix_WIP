@model MvcPhoenix.Models.OrderItem
@{
    string HeaderMessageMode = Model.CrudMode == "RO" ? "Locked" : "UnLocked";
}

<div id="dialogPlaceholderModal" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            @using (Ajax.BeginForm("SaveItem", "Orders", new AjaxOptions
                {
                    HttpMethod = "POST",
                    UpdateTargetId = "dialogResult",
                    InsertionMode = InsertionMode.Replace,
                    OnSuccess = "CloseForm",
                    OnFailure = "SaveFailure"
                }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Order Item: @Html.DisplayFor(m => m.ItemID) <small><em>@HeaderMessageMode</em></small></h4>
                </div>

                <div id="dialogPlaceholderBody" class="modal-body">

                    @Html.HiddenFor(m => m.ItemID)
                    @Html.HiddenFor(m => m.OrderID)
                    @Html.HiddenFor(m => m.ClientID)
                    @Html.HiddenFor(m => m.CreateDate)
                    @Html.HiddenFor(m => m.CreateUser)
                    @Html.HiddenFor(m => m.UpdateDate)
                    @Html.HiddenFor(m => m.UpdateUser)

                    <div class="row">
                        @if (@Model.CrudMode == "RO")
                        {
                            <div class="col-md-12 form-group">
                                <label>Product Code</label>
                                @Html.TextBoxFor(m => m.ProductCode, new { @class = "form-control", disabled = "disabled" })
                            </div>

                            <div class="col-md-12 form-group">
                                <label>Product Name</label>
                                @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control", disabled = "disabled" })
                                @Html.HiddenFor(m => m.ProductDetailID)
                            </div>
                        }

                        @if (@Model.CrudMode == "RW")
                        {
                            <div class="col-md-12 form-group">
                                @Html.DropDownListFor(m => m.ProductDetailID, Model.ListOfProductDetailIDs, new { onchange = "fnGetSizes();fnCatchProductDetailId(this.value);", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ProductDetailID)
                            </div>
                        }
                    </div>

                    <div class="row">
                        <div class="col-md-5 form-group">
                            <label>Lot Number</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.LotNumber, Model.LotNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.LotNumber)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.LotNumber, new { @class = "form-control", disabled = "disabled" })
                            }
                        </div>
                        <div class="col-md-3 form-group">
                            <label>Size</label>
                            @if (@Model.CrudMode == "RO")
                            {
                                @Html.TextBoxFor(m => m.Size, new { @class = "form-control", disabled = "disabled" })
                                @Html.HiddenFor(m => m.ShelfID)
                            }
                            @if (@Model.CrudMode == "RW" && @Model.ShelfID > 0)
                            {
                                <span id="FirstShelfID">
                                    @Html.DropDownListFor(m => m.ShelfID, Model.ListOfShelfIDs, new { @class = "form-control" })
                                </span>
                            }
                            else
                            {
                                <div id="dvPlaceholderSize">
                                    <select name="ShelfID" id="ShelfID" class="form-control hidden"><!-- Placeholder for option values --></select>
                                </div>
                            }
                        </div>
                        <div class="col-md-2 form-group">
                            <label>SR Size</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.SRSize, Model.SRSize, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.SRSize)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.SRSize, new { @class = "form-control", disabled = "disabled" })
                            }
                        </div>
                        <div class="col-md-2 form-group">
                            <label>Qty</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.Qty, new { @class = "form-control", min = "1" })
                                @Html.ValidationMessageFor(m => m.Qty)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Qty, new { @class = "form-control", disabled = "disabled" })
                                @Html.HiddenFor(m => m.Qty)
                            }
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 form-group">
                            <label>Carrier</label>
                            @Html.DropDownListFor(m => m.ItemShipVia, Model.ListOfShipVias, new { @class = "form-control" })
                        </div>
                        <div class="col-md-4 form-group">
                            <label>Ship Date</label>
                            @Html.TextBoxFor(m => m.ShipDate, "{0:dd MMM yyyy}", new { @class = "date-picker form-control" })
                        </div>
                        <div class="col-md-4 form-group">
                            <label>A-Status</label>
                            @Html.TextBoxFor(m => m.AllocateStatus, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-unstyled list-2-col">
                                <li>
                                    <label>CS Allocate</label> <br />
                                    @Html.CheckBox("CSAllocate", Model.CSAllocate != null && (bool)Model.CSAllocate)
                                </li>
                                <li>
                                    <label>Carrier Inv Rec'd</label>
                                    @Html.CheckBox("CarrierInvoiceRcvd", Model.CarrierInvoiceRcvd != null && (bool)Model.CarrierInvoiceRcvd)
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <ul class="list-unstyled list-2-col">
                                <li>
                                    <label>Back Ordered</label> <br />
                                    @Html.CheckBox("BackOrdered", Model.BackOrdered != null && (bool)Model.BackOrdered)
                                </li>
                                <li>
                                    <label>Non CMC Delay</label>
                                    @Html.CheckBox("NonCMCDelay", Model.NonCMCDelay != null && (bool)Model.NonCMCDelay)
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label>Delay Reason</label>
                            @Html.DropDownList("DelayReason", (List<SelectListItem>)ViewBag.ListOfDelayReasons, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label>Add a Status to Notes</label>
                            @Html.DropDownListFor(m => m.StatusID, Model.ListOfStatusNotesIDs, new { onchange = "AddStatusIDToStatus()", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.StatusID)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label>Status</label>
                            @Html.TextAreaFor(m => m.Status, new { rows = "4", @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseForm()">Close</button>
                    @if (@Model.CrudMode == "RW")
                    {
                        @Ajax.ActionLink("Delete", "DeleteItem", "Orders", new { id = Model.ItemID }, new AjaxOptions
                        {
                            HttpMethod = "GET",
                            UpdateTargetId = "dialogResult",
                            InsertionMode = InsertionMode.Replace,
                            OnSuccess = "CloseForm()",
                            Confirm = "Are you sure you want to delete this item?"
                        }, new { @class = "btn btn-danger" })
                    }
                    else
                    {
                        <span>&nbsp;</span>
                    }
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">

    function fnCatchProductDetailId(id) {
        $('#ProductDetailID').val(id);
    }

    function fnGetSizes() {
        // empty the dd then rebuild it
        $('#FirstShelfID').empty();
        $('#ShelfID').removeClass('hidden');
        var myurl = '@Url.Action("BuildSizeDropDown", "Orders")';
        var data = $('#ProductDetailID').val();
        $("#ShelfID").load(myurl, { id: data });
    }

    function AddStatusIDToStatus() {
        // read the DD, read the Notes, append the status DD .text to the StatusNOtes
        var currentstatus = $('#Status').val();
        var addstatus = $('#StatusID').val();
        if (currentstatus != '') {
            $('#Status').val(currentstatus + '\r\n' + addstatus);
        }
        else {
            $('#Status').val(addstatus);
        }
    }

    function SaveFailure() {
        $('#dialogResult').html("Update failed - Please contact Support");
    }

    function CloseForm() {
        // Update the items partial
        $("#dvOrderItemsList").load('@Url.Action("fnOrderItemsList", "Orders", new { id = @Model.OrderID })');

        // Update the trans partial
        $("#dvOrderTransList").load('@Url.Action("fnOrderTransList", "Orders", new { id = @Model.OrderID })');

        // Hide the modal
        $('#dialogPlaceholderModal').modal('hide');

        // Show sample alert note
        SampleOrderAlert($('#ProductDetailID').val());
    }
</script>