@model MvcPhoenix.Models.OrderItem
@{
    string HeaderMessageMode = Model.CrudMode == "RO" ? "Locked" : "UnLocked";
}

<style>
    .ui-autocomplete {
        max-height: 200px;
        overflow-y: auto;
        overflow-x: hidden; /* prevent horizontal scrollbar */
        padding-right: 20px; /* add padding to account for vertical scrollbar */
    }
</style>

<div id="dialogPlaceholderModal" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            @using (Ajax.BeginForm("SaveItem", "Orders", new AjaxOptions
                {
                    HttpMethod = "POST",
                    UpdateTargetId = "dialogResult",
                    InsertionMode = InsertionMode.Replace,
                    OnSuccess = "CloseForm",
                    OnFailure = "SaveFailure"
                }, new { @id = "SaveItem" }))
            {
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Order Item: @Html.DisplayFor(m => m.ItemID) <small><em>@HeaderMessageMode</em></small></h4>
                </div>

                <div id="dialogPlaceholderBody" class="modal-body">
                    @Html.HiddenFor(m => m.ItemID)
                    @Html.HiddenFor(m => m.OrderID)
                    @Html.HiddenFor(m => m.ClientID)
                    @Html.HiddenFor(m => m.BulkID)
                    @Html.HiddenFor(m => m.AllocateStatus)
                    @Html.HiddenFor(m => m.LotNumber)
                    @Html.HiddenFor(m => m.CreateDate)
                    @Html.HiddenFor(m => m.CreateUser)
                    @Html.HiddenFor(m => m.UpdateDate)
                    @Html.HiddenFor(m => m.UpdateUser)

                    <div class="row">
                        <div class="col-md-12 form-group">
                            @if (@Model.CrudMode == "RO")
                            {
                                @Html.HiddenFor(m => m.ProductDetailID)
                                <label>Product</label>
                                <h2>@Html.DisplayTextFor(m => m.ProductCode) - @Html.DisplayTextFor(m => m.ProductName)</h2>
                                <style type="text/css">
                                    #combobox-wrapper {
                                        display: none;
                                    }
                                </style>
                            }

                            @if (@Model.CrudMode == "RW")
                            {
                                <label>Product</label>
                                @Html.DropDownListFor(m => m.ProductDetailID, ApplicationService.ddlProductCodes(Model.ClientID), new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ProductDetailID)
                            }
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 form-group">
                            <label>Lot Number</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.LotNumber, Model.LotNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.LotNumber)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.LotNumber, new { @class = "form-control", disabled = "disabled" })
                            }
                        </div>
                        <div class="col-md-4 form-group">
                            <label>Size</label>
                            @if (@Model.CrudMode == "RO")
                            {
                                @Html.TextBoxFor(m => m.Size, new { @class = "form-control", disabled = "disabled" })
                                @Html.HiddenFor(m => m.ShelfID)
                            }
                            @if (@Model.CrudMode == "RW" && @Model.ShelfID > 0)
                            {
                                <span id="FirstShelfID">
                                    @Html.DropDownListFor(m => m.ShelfID, ApplicationService.ddlProductCodeSizes(Convert.ToInt32(Model.ProductDetailID)), new { @class = "form-control" })
                                </span>
                            }
                            else
                            {
                                <div id="dvPlaceholderSize">
                                    <select name="ShelfID" id="ShelfID" class="form-control hidden"><!-- Placeholder for option values --></select>
                                </div>
                            }
                        </div>
                        <div class="col-md-2 form-group">
                            <label>SR Size</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.SRSize, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.SRSize)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.SRSize, new { @class = "form-control", disabled = "disabled" })
                            }
                        </div>
                        <div class="col-md-2 form-group">
                            <label>Qty</label>
                            @if (@Model.CrudMode == "RW")
                            {
                                @Html.TextBoxFor(m => m.Qty, new { @class = "form-control", min = "1" })
                                @Html.ValidationMessageFor(m => m.Qty)
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.Qty, new { @class = "form-control", disabled = "disabled" })
                                @Html.HiddenFor(m => m.Qty)
                            }
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 form-group">
                            <label>Carrier</label>
                            @Html.DropDownListFor(m => m.ItemShipVia, ApplicationService.ddlCarriers(), new { @class = "form-control" })
                        </div>
                        <div class="col-md-6 form-group">
                            <label>Ship Date</label>
                            @Html.TextBoxFor(m => m.ShipDate, "{0:dd MMM yyyy}", new { @class = "date-picker form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-unstyled list-2-col">
                                <li>
                                    <label>CS Allocate</label>
                                    @Html.CheckBox("CSAllocate", Model.CSAllocate != null && (bool)Model.CSAllocate)
                                </li>
                                <li>
                                    <label><abbr title="Carrier Invoice Received">Carrier Inv Rcv</abbr></label>
                                    @Html.CheckBox("CarrierInvoiceRcvd", Model.CarrierInvoiceRcvd != null && (bool)Model.CarrierInvoiceRcvd)
                                </li>
                            </ul></div>
                        <div class="col-md-6">
                            <ul class="list-unstyled list-2-col">
                                <li>
                                    <label><abbr title="Non CMC Delay">Non Delay</abbr></label>
                                    @Html.CheckBox("NonCMCDelay", Model.NonCMCDelay != null && (bool)Model.NonCMCDelay)
                                </li>
                                <li>
                                    <label>R&D/Transfer</label>
                                    @Html.CheckBox("RDTransfer", Model.RDTransfer != null && (bool)Model.RDTransfer)
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 form-group">
                            <label>Delay Reason</label>
                            @Html.DropDownList("DelayReason", ApplicationService.ddlDelayReasons(), new { @class = "form-control" })
                        </div>
                        <div class="col-md-3 form-group">
                            <label>Waste Weight</label>
                            @Html.TextBoxFor(m => m.WasteOrderTotalWeight, new { @class = "form-control" })
                        </div>
                        <div class="col-md-3 form-group">
                            <label>SPS Charge</label>
                            @Html.TextBoxFor(m => m.SPSCharge, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label>Add a Status to Notes</label>
                            @Html.DropDownListFor(m => m.StatusID, ApplicationService.ddlStatusNotesIDs(), new { onchange = "AddStatusIDToStatus()", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.StatusID)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 form-group">
                            <label>Status Notes</label>
                            @Html.TextAreaFor(m => m.Status, new { rows = "4", @class = "form-control" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <label>Item Notes</label>
                            @Html.TextAreaFor(m => m.ItemNotes, new { rows = "2", @class = "form-control" })
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="CloseForm()">Close</button>
                    @if (@Model.CrudMode == "RW")
                    {
                        @Ajax.ActionLink("Delete", "DeleteItem", "Orders", new { id = Model.ItemID }, new AjaxOptions
                        {
                            HttpMethod = "GET",
                            UpdateTargetId = "dialogResult",
                            InsertionMode = InsertionMode.Replace,
                            OnSuccess = "CloseForm()",
                            Confirm = "Are you sure you want to delete this item?"
                        }, new { @class = "btn btn-danger" })
                    }
                    else
                    {
                        <span>&nbsp;</span>
                    }
                    @if (Model.ShipDate > DateTime.Now.AddDays(-5) || Model.ShipDate == null)
                    {
                        <button type="submit" class="btn btn-primary">Save</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    // Prevent form submission when enter key is pressed in modal
    $(document).ready(function () {
        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });
    });

    // Product selection autocomplete+combobox functionality
    $(function () {
        // widget constructor wrapper for main function
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                    .attr("id", "combobox-wrapper")
                    .insertAfter(this.element);
                this.element.hide();
                this._createAutocomplete();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                    value = selected.val() ? selected.text() : "";

                this.input = $("<input>")
                  .appendTo(this.wrapper)
                  .val(value)
                  .addClass("form-control")
                  .attr("id", "xProductDetailID")
                  .autocomplete({
                      delay: 0,
                      minLength: 0,
                      source: $.proxy(this, "_source"),
                      appendTo: $('#SaveItem'),
                  });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {
                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                    valueLowerCase = value.toLowerCase(),
                    valid = false;
                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                  .val("")
                  .attr("title", value + " didn't match any item")
                  .tooltip("open");
                this.element.val("");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.autocomplete("instance").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });

        $("#ProductDetailID").combobox();
    });

    $(function () {
        $(document).on("change", "#xProductDetailID", function () {
            fnGetSizes($('#ProductDetailID').val());
        });
    });

    function fnGetSizes(id) {
        var data = id;
        var myurl = '@Url.Action("BuildSizeDropDown", "Orders")';

        $('#FirstShelfID').empty();                                         // empty the dd then rebuild it
        $('#ShelfID').removeClass('hidden');
        $("#ShelfID").load(myurl, { id: data });
    }

    function AddStatusIDToStatus() {
        // read the DD, read the Notes, append the status DD .text to the StatusNOtes
        var currentstatus = $('#Status').val();
        var addstatus = $('#StatusID').val();

        if (currentstatus != '') {
            $('#Status').val(currentstatus + '\r\n' + addstatus);
        }
        else {
            $('#Status').val(addstatus);
        }
    }

    function SaveFailure() {
        $('#dialogResult').html("Update failed - Please contact Support");
    }

    function CloseForm() {
        // Update the items partial
        $("#dvOrderItemsList").load('@Url.Action("fnOrderItemsList", "Orders", new { orderid = @Model.OrderID })');
        // Update the trans partial
        $("#dvOrderTransList").load('@Url.Action("fnOrderTransList", "Orders", new { orderid = @Model.OrderID })');
        // Hide the modal
        $('#dialogPlaceholderModal').modal('hide');
        // Show sample alert note
        SampleOrderAlert($('#ProductDetailID').val());
    }

    $(function () {
        $(".date-picker").datepicker({ dateFormat: 'dd-M-yy' });
    });
</script>