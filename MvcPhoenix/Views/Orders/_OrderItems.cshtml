@model List<MvcPhoenix.Models.OrderItem>
@using MvcPhoenix.Extensions;

@{
    ViewBag.Title = "Order Items";
}

<div class="table-responsive form-group">
    <table id="mytable" class="table table-hover table-striped">
        <thead>
            <tr>
                <th></th>
                <th>#</th>
                <th>Item Id</th>
                <th>Shelf</th>
                <th>Bulk</th>
                <th>Code</th>
                <th>Name</th>
                <th>Size</th>
                <th>Lot#</th>
                <th class="text-center">Qty</th>
                <th class="text-center">Avail Qty</th>
                <th class="text-center">Ship Date</th>
                <th class="text-center">Carrier</th>
                <th class="text-center">Delay</th>
                <th class="text-center">CS Allocate?</th>
                <th class="text-center">A-Status</th>
                <th class="text-center">Allocated On</th>
                <th class="text-center">Grn UN</th>
                <th class="text-center">Air UN</th>
                <th>Updated On</th>
                <th id="noprint"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @if (item.ProductDetailID > 0)
                        {
                            <div style="zoom:15%;">
                                @Html.GenerateMatrixCode(Convert.ToString(@item.ProductCode + "~" + @item.LotNumber + "~" + @item.Size))
                            </div>
                        }
                    </td>
                    <td>@(Model.IndexOf(item) + 1)</td>
                    <td>@item.ItemID</td>
                    <td>@item.ShelfID</td>
                    <td>@item.BulkID</td>
                    <td>@item.ProductCode</td>
                    <td>@item.ProductName</td>
                    <td>
                        @item.Size
                        <br />
                        @if (item.SRSize > 0)
                        {
                            @item.SRSize
                        }
                    </td>
                    <td>@item.LotNumber</td>
                    <td class="text-center">@item.Qty</td>
                    <td class="text-center">@item.QtyAvailable</td>
                    <td class="text-center">@String.Format("{0:dd MMM yyyy}", item.ShipDate)</td>
                    <td class="text-center">@item.Via</td>
                    <td class="text-center"><input type="checkbox" checked="@item.NonCMCDelay" readonly="readonly" onclick="return false;" /></td>
                    <td class="text-center"><input type="checkbox" checked="@item.CSAllocate" readonly="readonly" onclick="return false;" /></td>
                    <td class="text-center">
                        @item.AllocateStatus
                        @if (item.AllocateStatus == "A" && item.ShipDate.ToString() == "")
                        {
                            <br />
                            <span>
                                @Ajax.ActionLink(" ", "ReverseAllocatedItem", "Orders", new { orderitemid = @item.ItemID }, new AjaxOptions
                                {
                                    UpdateTargetId = "dialogPlaceholder",
                                    InsertionMode = InsertionMode.Replace,
                                    HttpMethod = "GET",
                                    OnSuccess = "UpdateItemsList"
                                }, new { @class = "btn btn-sm btn-primary fa fa-undo", @title = "Reverse Allocation" })
                            </span>
                        }
                    </td>
                    <td class="text-center">@String.Format("{0:dd MMM yyyy}", item.AllocatedDate)</td>
                    <td class="text-center">@item.GrnUnNumber, @item.GrnPkGroup</td>
                    <td class="text-center">@item.AirUnNumber, @item.AirPkGroup</td>
                    <td title="Updated by: @item.UpdateUser">@String.Format("{0:dd MMM yyyy}", item.UpdateDate)</td>
                    <td id="noprint" class="text-right">
                        @if (item.ProductDetailID > 0)
                        {
                            @Ajax.ActionLink(" ", "EditItem", "Orders", new { id = @item.ItemID }, new AjaxOptions
                            {
                                UpdateTargetId = "dialogPlaceholder",
                                InsertionMode = InsertionMode.Replace,
                                HttpMethod = "GET",
                                OnSuccess = "$('#dialogPlaceholderModal').modal('show');"
                            }, new { @class = "btn btn-primary btn-sm fa fa-pencil", @title = "Edit" })
                        }
                        else
                        {
                            <div id="alertNotes" class="hidden">@item.ItemNotes</div>
                            <a class="btn btn-primary btn-sm fa fa-sticky-note-o" onclick="ShowNote(alertNotes.textContent)" title="Show Notes"></a>
                            if (item.AllocateStatus != "A")
                            {
                                @Ajax.ActionLink(" ", "DeleteItem", "Orders", new { id = @item.ItemID }, new AjaxOptions
                                {
                                    UpdateTargetId = "dialogPlaceholder",
                                    OnComplete = "UpdateItemsList()"
                                }, new { @class = "btn btn-danger btn-sm fa fa-trash-o", @title = "Delete" })
                            }
                        }
                    </td>

                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Start Allocate Buttons -->
@*dvAllocateResult is in Edit.cshtml to provide a place to stick a message after allocation*@
<div class="row" id="noprint">
    <div class="col-md-offset-6 col-md-6">
        <div class="panel panel-primary" style="margin-bottom:-10px;">
            <div class="panel-body" style="margin:-5px">
                <label>Shelf Allocate</label>
                <div class="row">
                    <div class="col-md-6">
                        @Ajax.ActionLink("Available Stock Only", "AllocateFromShelf", "Orders", new { id = Model[0].OrderID, IncludeQCStock = false },
                        new AjaxOptions
                             {
                                 UpdateTargetId = "dvAllocateResult",
                                 InsertionMode = InsertionMode.Replace,
                                 HttpMethod = "GET",
                                 OnSuccess = "UpdateItemsList",
                                 OnFailure = "$.alert('Error - Could not allocate order')"
                             }, new { @class = "btn btn-sm btn-primary btn-block", @title = "Allocate from available shelf stock" })
                    </div>
                    <div class="col-md-6">
                        @Ajax.ActionLink("QC Stock Only", "AllocateFromShelf", "Orders", new { id = Model[0].OrderID, IncludeQCStock = true },
                        new AjaxOptions
                             {
                                 UpdateTargetId = "dvAllocateResult",
                                 InsertionMode = InsertionMode.Replace,
                                 HttpMethod = "GET",
                                 OnSuccess = "UpdateItemsList",
                                 OnFailure = "$.alert('Error - Could not allocate order')",
                             }, new { @class = "btn btn-sm btn-primary btn-block", @title = "Allocate from QC shelf stock. \nQC stock is considered any status not 'AVAIL' or 'HOLD' \nUse 'Returns' utility instead unless needed. " })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Allocate Buttons -->

<script type="text/javascript">
    function UpdateItemsList() {
        $("#dvOrderItemsList").load('@Url.Action("OrderItemsList", "Orders", new { orderid = @Model[0].OrderID })');
    }

    function ShowNote(itemNote){
        alert(itemNote);
    }
</script>